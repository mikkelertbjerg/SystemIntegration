// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Booking.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Faraday_BE_gRPC {

  /// <summary>Holder for reflection information generated from Protos/Booking.proto</summary>
  public static partial class BookingReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/Booking.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BookingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3MvQm9va2luZy5wcm90bxIEQm9vayJeCg9Mb2NhdGlvblJlcXVl",
            "c3QSCgoCSWQYASABKAUSDwoHQWRkcmVzcxgCIAEoCRIPCgdaaXBjb2RlGAMg",
            "ASgJEgwKBENpdHkYBCABKAkSDwoHQ291bnRyeRgFIAEoCSKIBQoOQm9va2lu",
            "Z1JlcXVlc3QSDAoEbmFtZRgBIAEoCRIQCghsYXN0TmFtZRgCIAEoCRIWCg5k",
            "cml2ZXJzTGljZW5zZRgDIAEoCRIOCgZnZW5kZXIYBCABKAkSDQoFY29sb3IY",
            "BSABKAkSDQoFbW9kZWwYBiABKAkSDQoFZG9vcnMYByABKAUSEAoIZnVlbHR5",
            "cGUYCCABKAkSDAoEdHlwZRgJIAEoCRINCgVwcmljZRgKIAEoAhIPCgdhbmlt",
            "YWxzGAsgASgIEg0KBWJyYW5kGAwgASgJEhUKDWRyb3BvZmZhZHJlc3MYDSAB",
            "KAkSEwoLZHJvcG9mZmNpdHkYDiABKAkSFgoOZHJvcG9mZnppcGNvZGUYDyAB",
            "KAkSFgoOZHJvcG9mZmNvdW50cnkYECABKAkSFAoMcGlja1VwYWRyZXNzGBEg",
            "ASgJEhIKCnBpY2tVcGNpdHkYEiABKAkSFQoNcGlja1VwemlwY29kZRgTIAEo",
            "CRIVCg1waWNrVXBjb3VudHJ5GBQgASgJEhUKDUNhckxvY2F0aW9uSWQYFSAB",
            "KAUSFgoOQ2FyQXZhaWxhYmxpdHkYFiABKAgSEgoKcGlja3VwWWVhchgXIAEo",
            "BRITCgtwaWNrVXBNb250aBgYIAEoBRIRCglQaWNrVXBEYXkYGSABKAUSEgoK",
            "UGlja1VwSG91chgaIAEoBRIUCgxwaWNrVXBNaW51dGUYGyABKAUSEwoLZHJv",
            "cG9mZlllYXIYHCABKAUSFAoMZHJvcG9mZk1vbnRoGB0gASgFEhIKCmRyb3Bv",
            "ZmZEYXkYHiABKAUSEwoLZHJvcG9mZkhvdXIYHyABKAUSFQoNZHJvcG9mZk1p",
            "bnV0ZRggIAEoBSIOCgxFbXB0eVJlcXVlc3QiHwoMQ29tZmlybVJlcGx5Eg8K",
            "B2NvbmZpcm0YASABKAgicgoPQ3VzdG9tZXJSZXF1ZXN0EhIKCkN1c3RvbWVy",
            "SWQYASABKAUSEQoJRmlyc3ROYW1lGAIgASgJEhAKCExhc3ROYW1lGAMgASgJ",
            "Eg4KBkdlbmRlchgEIAEoCRIWCg5Ecml2ZXJzTGljZW5zZRgFIAEoCSKyAQoI",
            "Q2FyUmVwbHkSDQoFQ2FySWQYASABKAUSDQoFRG9vcnMYAiABKAUSEAoIRnVl",
            "bFR5cGUYAyABKAkSDAoEVHlwZRgEIAEoCRIUCgxMaWNlbnNlUGxhdGUYBSAB",
            "KAkSDQoFUHJpY2UYBiABKAISFgoOQW5pbWFsc0FsbG93ZWQYByABKAgSDQoF",
            "Q29sb3IYCCABKAkSDQoFQnJhbmQYCSABKAkSDQoFTW9kZWwYCiABKAkykwIK",
            "B0Jvb2tpbmcSQQoSTWFrZU5ld0Jvb2tpbmdHUlBDEhIuQm9vay5FbXB0eVJl",
            "cXVlc3QaFS5Cb29rLkxvY2F0aW9uUmVxdWVzdDABEkAKFENyZWF0ZUNhckJv",
            "b2tpbmdHUlBDEhQuQm9vay5Cb29raW5nUmVxdWVzdBoSLkJvb2suQ29tZmly",
            "bVJlcGx5EkEKFFJlZ2lzdGVyQ3VzdG9tZXJHUlBDEhUuQm9vay5DdXN0b21l",
            "clJlcXVlc3QaEi5Cb29rLkNvbWZpcm1SZXBseRJAChVTaG93QXZhaWxhYmxl",
            "Q2Fyc0dSUEMSFS5Cb29rLkxvY2F0aW9uUmVxdWVzdBoOLkJvb2suQ2FyUmVw",
            "bHkwAUISqgIPRmFyYWRheV9CRV9nUlBDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Faraday_BE_gRPC.LocationRequest), global::Faraday_BE_gRPC.LocationRequest.Parser, new[]{ "Id", "Address", "Zipcode", "City", "Country" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Faraday_BE_gRPC.BookingRequest), global::Faraday_BE_gRPC.BookingRequest.Parser, new[]{ "Name", "LastName", "DriversLicense", "Gender", "Color", "Model", "Doors", "Fueltype", "Type", "Price", "Animals", "Brand", "Dropoffadress", "Dropoffcity", "Dropoffzipcode", "Dropoffcountry", "PickUpadress", "PickUpcity", "PickUpzipcode", "PickUpcountry", "CarLocationId", "CarAvailablity", "PickupYear", "PickUpMonth", "PickUpDay", "PickUpHour", "PickUpMinute", "DropoffYear", "DropoffMonth", "DropoffDay", "DropoffHour", "DropoffMinute" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Faraday_BE_gRPC.EmptyRequest), global::Faraday_BE_gRPC.EmptyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Faraday_BE_gRPC.ComfirmReply), global::Faraday_BE_gRPC.ComfirmReply.Parser, new[]{ "Confirm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Faraday_BE_gRPC.CustomerRequest), global::Faraday_BE_gRPC.CustomerRequest.Parser, new[]{ "CustomerId", "FirstName", "LastName", "Gender", "DriversLicense" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Faraday_BE_gRPC.CarReply), global::Faraday_BE_gRPC.CarReply.Parser, new[]{ "CarId", "Doors", "FuelType", "Type", "LicensePlate", "Price", "AnimalsAllowed", "Color", "Brand", "Model" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LocationRequest : pb::IMessage<LocationRequest> {
    private static readonly pb::MessageParser<LocationRequest> _parser = new pb::MessageParser<LocationRequest>(() => new LocationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Faraday_BE_gRPC.BookingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationRequest(LocationRequest other) : this() {
      id_ = other.id_;
      address_ = other.address_;
      zipcode_ = other.zipcode_;
      city_ = other.city_;
      country_ = other.country_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationRequest Clone() {
      return new LocationRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Zipcode" field.</summary>
    public const int ZipcodeFieldNumber = 3;
    private string zipcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Zipcode {
      get { return zipcode_; }
      set {
        zipcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "City" field.</summary>
    public const int CityFieldNumber = 4;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 5;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Address != other.Address) return false;
      if (Zipcode != other.Zipcode) return false;
      if (City != other.City) return false;
      if (Country != other.Country) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Zipcode.Length != 0) hash ^= Zipcode.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (Zipcode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Zipcode);
      }
      if (City.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(City);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Country);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Zipcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zipcode);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Zipcode.Length != 0) {
        Zipcode = other.Zipcode;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 26: {
            Zipcode = input.ReadString();
            break;
          }
          case 34: {
            City = input.ReadString();
            break;
          }
          case 42: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BookingRequest : pb::IMessage<BookingRequest> {
    private static readonly pb::MessageParser<BookingRequest> _parser = new pb::MessageParser<BookingRequest>(() => new BookingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BookingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Faraday_BE_gRPC.BookingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookingRequest(BookingRequest other) : this() {
      name_ = other.name_;
      lastName_ = other.lastName_;
      driversLicense_ = other.driversLicense_;
      gender_ = other.gender_;
      color_ = other.color_;
      model_ = other.model_;
      doors_ = other.doors_;
      fueltype_ = other.fueltype_;
      type_ = other.type_;
      price_ = other.price_;
      animals_ = other.animals_;
      brand_ = other.brand_;
      dropoffadress_ = other.dropoffadress_;
      dropoffcity_ = other.dropoffcity_;
      dropoffzipcode_ = other.dropoffzipcode_;
      dropoffcountry_ = other.dropoffcountry_;
      pickUpadress_ = other.pickUpadress_;
      pickUpcity_ = other.pickUpcity_;
      pickUpzipcode_ = other.pickUpzipcode_;
      pickUpcountry_ = other.pickUpcountry_;
      carLocationId_ = other.carLocationId_;
      carAvailablity_ = other.carAvailablity_;
      pickupYear_ = other.pickupYear_;
      pickUpMonth_ = other.pickUpMonth_;
      pickUpDay_ = other.pickUpDay_;
      pickUpHour_ = other.pickUpHour_;
      pickUpMinute_ = other.pickUpMinute_;
      dropoffYear_ = other.dropoffYear_;
      dropoffMonth_ = other.dropoffMonth_;
      dropoffDay_ = other.dropoffDay_;
      dropoffHour_ = other.dropoffHour_;
      dropoffMinute_ = other.dropoffMinute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookingRequest Clone() {
      return new BookingRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 2;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "driversLicense" field.</summary>
    public const int DriversLicenseFieldNumber = 3;
    private string driversLicense_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DriversLicense {
      get { return driversLicense_; }
      set {
        driversLicense_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 4;
    private string gender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gender {
      get { return gender_; }
      set {
        gender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 6;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "doors" field.</summary>
    public const int DoorsFieldNumber = 7;
    private int doors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Doors {
      get { return doors_; }
      set {
        doors_ = value;
      }
    }

    /// <summary>Field number for the "fueltype" field.</summary>
    public const int FueltypeFieldNumber = 8;
    private string fueltype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fueltype {
      get { return fueltype_; }
      set {
        fueltype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "animals" field.</summary>
    public const int AnimalsFieldNumber = 11;
    private bool animals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Animals {
      get { return animals_; }
      set {
        animals_ = value;
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 12;
    private string brand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dropoffadress" field.</summary>
    public const int DropoffadressFieldNumber = 13;
    private string dropoffadress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dropoffadress {
      get { return dropoffadress_; }
      set {
        dropoffadress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dropoffcity" field.</summary>
    public const int DropoffcityFieldNumber = 14;
    private string dropoffcity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dropoffcity {
      get { return dropoffcity_; }
      set {
        dropoffcity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dropoffzipcode" field.</summary>
    public const int DropoffzipcodeFieldNumber = 15;
    private string dropoffzipcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dropoffzipcode {
      get { return dropoffzipcode_; }
      set {
        dropoffzipcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dropoffcountry" field.</summary>
    public const int DropoffcountryFieldNumber = 16;
    private string dropoffcountry_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dropoffcountry {
      get { return dropoffcountry_; }
      set {
        dropoffcountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pickUpadress" field.</summary>
    public const int PickUpadressFieldNumber = 17;
    private string pickUpadress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickUpadress {
      get { return pickUpadress_; }
      set {
        pickUpadress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pickUpcity" field.</summary>
    public const int PickUpcityFieldNumber = 18;
    private string pickUpcity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickUpcity {
      get { return pickUpcity_; }
      set {
        pickUpcity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pickUpzipcode" field.</summary>
    public const int PickUpzipcodeFieldNumber = 19;
    private string pickUpzipcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickUpzipcode {
      get { return pickUpzipcode_; }
      set {
        pickUpzipcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pickUpcountry" field.</summary>
    public const int PickUpcountryFieldNumber = 20;
    private string pickUpcountry_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PickUpcountry {
      get { return pickUpcountry_; }
      set {
        pickUpcountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CarLocationId" field.</summary>
    public const int CarLocationIdFieldNumber = 21;
    private int carLocationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarLocationId {
      get { return carLocationId_; }
      set {
        carLocationId_ = value;
      }
    }

    /// <summary>Field number for the "CarAvailablity" field.</summary>
    public const int CarAvailablityFieldNumber = 22;
    private bool carAvailablity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CarAvailablity {
      get { return carAvailablity_; }
      set {
        carAvailablity_ = value;
      }
    }

    /// <summary>Field number for the "pickupYear" field.</summary>
    public const int PickupYearFieldNumber = 23;
    private int pickupYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickupYear {
      get { return pickupYear_; }
      set {
        pickupYear_ = value;
      }
    }

    /// <summary>Field number for the "pickUpMonth" field.</summary>
    public const int PickUpMonthFieldNumber = 24;
    private int pickUpMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickUpMonth {
      get { return pickUpMonth_; }
      set {
        pickUpMonth_ = value;
      }
    }

    /// <summary>Field number for the "PickUpDay" field.</summary>
    public const int PickUpDayFieldNumber = 25;
    private int pickUpDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickUpDay {
      get { return pickUpDay_; }
      set {
        pickUpDay_ = value;
      }
    }

    /// <summary>Field number for the "PickUpHour" field.</summary>
    public const int PickUpHourFieldNumber = 26;
    private int pickUpHour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickUpHour {
      get { return pickUpHour_; }
      set {
        pickUpHour_ = value;
      }
    }

    /// <summary>Field number for the "pickUpMinute" field.</summary>
    public const int PickUpMinuteFieldNumber = 27;
    private int pickUpMinute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickUpMinute {
      get { return pickUpMinute_; }
      set {
        pickUpMinute_ = value;
      }
    }

    /// <summary>Field number for the "dropoffYear" field.</summary>
    public const int DropoffYearFieldNumber = 28;
    private int dropoffYear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropoffYear {
      get { return dropoffYear_; }
      set {
        dropoffYear_ = value;
      }
    }

    /// <summary>Field number for the "dropoffMonth" field.</summary>
    public const int DropoffMonthFieldNumber = 29;
    private int dropoffMonth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropoffMonth {
      get { return dropoffMonth_; }
      set {
        dropoffMonth_ = value;
      }
    }

    /// <summary>Field number for the "dropoffDay" field.</summary>
    public const int DropoffDayFieldNumber = 30;
    private int dropoffDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropoffDay {
      get { return dropoffDay_; }
      set {
        dropoffDay_ = value;
      }
    }

    /// <summary>Field number for the "dropoffHour" field.</summary>
    public const int DropoffHourFieldNumber = 31;
    private int dropoffHour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropoffHour {
      get { return dropoffHour_; }
      set {
        dropoffHour_ = value;
      }
    }

    /// <summary>Field number for the "dropoffMinute" field.</summary>
    public const int DropoffMinuteFieldNumber = 32;
    private int dropoffMinute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropoffMinute {
      get { return dropoffMinute_; }
      set {
        dropoffMinute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BookingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BookingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (LastName != other.LastName) return false;
      if (DriversLicense != other.DriversLicense) return false;
      if (Gender != other.Gender) return false;
      if (Color != other.Color) return false;
      if (Model != other.Model) return false;
      if (Doors != other.Doors) return false;
      if (Fueltype != other.Fueltype) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Animals != other.Animals) return false;
      if (Brand != other.Brand) return false;
      if (Dropoffadress != other.Dropoffadress) return false;
      if (Dropoffcity != other.Dropoffcity) return false;
      if (Dropoffzipcode != other.Dropoffzipcode) return false;
      if (Dropoffcountry != other.Dropoffcountry) return false;
      if (PickUpadress != other.PickUpadress) return false;
      if (PickUpcity != other.PickUpcity) return false;
      if (PickUpzipcode != other.PickUpzipcode) return false;
      if (PickUpcountry != other.PickUpcountry) return false;
      if (CarLocationId != other.CarLocationId) return false;
      if (CarAvailablity != other.CarAvailablity) return false;
      if (PickupYear != other.PickupYear) return false;
      if (PickUpMonth != other.PickUpMonth) return false;
      if (PickUpDay != other.PickUpDay) return false;
      if (PickUpHour != other.PickUpHour) return false;
      if (PickUpMinute != other.PickUpMinute) return false;
      if (DropoffYear != other.DropoffYear) return false;
      if (DropoffMonth != other.DropoffMonth) return false;
      if (DropoffDay != other.DropoffDay) return false;
      if (DropoffHour != other.DropoffHour) return false;
      if (DropoffMinute != other.DropoffMinute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (DriversLicense.Length != 0) hash ^= DriversLicense.GetHashCode();
      if (Gender.Length != 0) hash ^= Gender.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Doors != 0) hash ^= Doors.GetHashCode();
      if (Fueltype.Length != 0) hash ^= Fueltype.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (Animals != false) hash ^= Animals.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (Dropoffadress.Length != 0) hash ^= Dropoffadress.GetHashCode();
      if (Dropoffcity.Length != 0) hash ^= Dropoffcity.GetHashCode();
      if (Dropoffzipcode.Length != 0) hash ^= Dropoffzipcode.GetHashCode();
      if (Dropoffcountry.Length != 0) hash ^= Dropoffcountry.GetHashCode();
      if (PickUpadress.Length != 0) hash ^= PickUpadress.GetHashCode();
      if (PickUpcity.Length != 0) hash ^= PickUpcity.GetHashCode();
      if (PickUpzipcode.Length != 0) hash ^= PickUpzipcode.GetHashCode();
      if (PickUpcountry.Length != 0) hash ^= PickUpcountry.GetHashCode();
      if (CarLocationId != 0) hash ^= CarLocationId.GetHashCode();
      if (CarAvailablity != false) hash ^= CarAvailablity.GetHashCode();
      if (PickupYear != 0) hash ^= PickupYear.GetHashCode();
      if (PickUpMonth != 0) hash ^= PickUpMonth.GetHashCode();
      if (PickUpDay != 0) hash ^= PickUpDay.GetHashCode();
      if (PickUpHour != 0) hash ^= PickUpHour.GetHashCode();
      if (PickUpMinute != 0) hash ^= PickUpMinute.GetHashCode();
      if (DropoffYear != 0) hash ^= DropoffYear.GetHashCode();
      if (DropoffMonth != 0) hash ^= DropoffMonth.GetHashCode();
      if (DropoffDay != 0) hash ^= DropoffDay.GetHashCode();
      if (DropoffHour != 0) hash ^= DropoffHour.GetHashCode();
      if (DropoffMinute != 0) hash ^= DropoffMinute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LastName);
      }
      if (DriversLicense.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DriversLicense);
      }
      if (Gender.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Gender);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Model);
      }
      if (Doors != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Doors);
      }
      if (Fueltype.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Fueltype);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Type);
      }
      if (Price != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Price);
      }
      if (Animals != false) {
        output.WriteRawTag(88);
        output.WriteBool(Animals);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Brand);
      }
      if (Dropoffadress.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Dropoffadress);
      }
      if (Dropoffcity.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Dropoffcity);
      }
      if (Dropoffzipcode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Dropoffzipcode);
      }
      if (Dropoffcountry.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Dropoffcountry);
      }
      if (PickUpadress.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(PickUpadress);
      }
      if (PickUpcity.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PickUpcity);
      }
      if (PickUpzipcode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PickUpzipcode);
      }
      if (PickUpcountry.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PickUpcountry);
      }
      if (CarLocationId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(CarLocationId);
      }
      if (CarAvailablity != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(CarAvailablity);
      }
      if (PickupYear != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(PickupYear);
      }
      if (PickUpMonth != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(PickUpMonth);
      }
      if (PickUpDay != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(PickUpDay);
      }
      if (PickUpHour != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(PickUpHour);
      }
      if (PickUpMinute != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(PickUpMinute);
      }
      if (DropoffYear != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DropoffYear);
      }
      if (DropoffMonth != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DropoffMonth);
      }
      if (DropoffDay != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(DropoffDay);
      }
      if (DropoffHour != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(DropoffHour);
      }
      if (DropoffMinute != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DropoffMinute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (DriversLicense.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriversLicense);
      }
      if (Gender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gender);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Doors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Doors);
      }
      if (Fueltype.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fueltype);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (Animals != false) {
        size += 1 + 1;
      }
      if (Brand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (Dropoffadress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dropoffadress);
      }
      if (Dropoffcity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dropoffcity);
      }
      if (Dropoffzipcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dropoffzipcode);
      }
      if (Dropoffcountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Dropoffcountry);
      }
      if (PickUpadress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PickUpadress);
      }
      if (PickUpcity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PickUpcity);
      }
      if (PickUpzipcode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PickUpzipcode);
      }
      if (PickUpcountry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PickUpcountry);
      }
      if (CarLocationId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CarLocationId);
      }
      if (CarAvailablity != false) {
        size += 2 + 1;
      }
      if (PickupYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickupYear);
      }
      if (PickUpMonth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickUpMonth);
      }
      if (PickUpDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickUpDay);
      }
      if (PickUpHour != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickUpHour);
      }
      if (PickUpMinute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PickUpMinute);
      }
      if (DropoffYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropoffYear);
      }
      if (DropoffMonth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropoffMonth);
      }
      if (DropoffDay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropoffDay);
      }
      if (DropoffHour != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropoffHour);
      }
      if (DropoffMinute != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropoffMinute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BookingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.DriversLicense.Length != 0) {
        DriversLicense = other.DriversLicense;
      }
      if (other.Gender.Length != 0) {
        Gender = other.Gender;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Doors != 0) {
        Doors = other.Doors;
      }
      if (other.Fueltype.Length != 0) {
        Fueltype = other.Fueltype;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.Animals != false) {
        Animals = other.Animals;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.Dropoffadress.Length != 0) {
        Dropoffadress = other.Dropoffadress;
      }
      if (other.Dropoffcity.Length != 0) {
        Dropoffcity = other.Dropoffcity;
      }
      if (other.Dropoffzipcode.Length != 0) {
        Dropoffzipcode = other.Dropoffzipcode;
      }
      if (other.Dropoffcountry.Length != 0) {
        Dropoffcountry = other.Dropoffcountry;
      }
      if (other.PickUpadress.Length != 0) {
        PickUpadress = other.PickUpadress;
      }
      if (other.PickUpcity.Length != 0) {
        PickUpcity = other.PickUpcity;
      }
      if (other.PickUpzipcode.Length != 0) {
        PickUpzipcode = other.PickUpzipcode;
      }
      if (other.PickUpcountry.Length != 0) {
        PickUpcountry = other.PickUpcountry;
      }
      if (other.CarLocationId != 0) {
        CarLocationId = other.CarLocationId;
      }
      if (other.CarAvailablity != false) {
        CarAvailablity = other.CarAvailablity;
      }
      if (other.PickupYear != 0) {
        PickupYear = other.PickupYear;
      }
      if (other.PickUpMonth != 0) {
        PickUpMonth = other.PickUpMonth;
      }
      if (other.PickUpDay != 0) {
        PickUpDay = other.PickUpDay;
      }
      if (other.PickUpHour != 0) {
        PickUpHour = other.PickUpHour;
      }
      if (other.PickUpMinute != 0) {
        PickUpMinute = other.PickUpMinute;
      }
      if (other.DropoffYear != 0) {
        DropoffYear = other.DropoffYear;
      }
      if (other.DropoffMonth != 0) {
        DropoffMonth = other.DropoffMonth;
      }
      if (other.DropoffDay != 0) {
        DropoffDay = other.DropoffDay;
      }
      if (other.DropoffHour != 0) {
        DropoffHour = other.DropoffHour;
      }
      if (other.DropoffMinute != 0) {
        DropoffMinute = other.DropoffMinute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            LastName = input.ReadString();
            break;
          }
          case 26: {
            DriversLicense = input.ReadString();
            break;
          }
          case 34: {
            Gender = input.ReadString();
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
          case 50: {
            Model = input.ReadString();
            break;
          }
          case 56: {
            Doors = input.ReadInt32();
            break;
          }
          case 66: {
            Fueltype = input.ReadString();
            break;
          }
          case 74: {
            Type = input.ReadString();
            break;
          }
          case 85: {
            Price = input.ReadFloat();
            break;
          }
          case 88: {
            Animals = input.ReadBool();
            break;
          }
          case 98: {
            Brand = input.ReadString();
            break;
          }
          case 106: {
            Dropoffadress = input.ReadString();
            break;
          }
          case 114: {
            Dropoffcity = input.ReadString();
            break;
          }
          case 122: {
            Dropoffzipcode = input.ReadString();
            break;
          }
          case 130: {
            Dropoffcountry = input.ReadString();
            break;
          }
          case 138: {
            PickUpadress = input.ReadString();
            break;
          }
          case 146: {
            PickUpcity = input.ReadString();
            break;
          }
          case 154: {
            PickUpzipcode = input.ReadString();
            break;
          }
          case 162: {
            PickUpcountry = input.ReadString();
            break;
          }
          case 168: {
            CarLocationId = input.ReadInt32();
            break;
          }
          case 176: {
            CarAvailablity = input.ReadBool();
            break;
          }
          case 184: {
            PickupYear = input.ReadInt32();
            break;
          }
          case 192: {
            PickUpMonth = input.ReadInt32();
            break;
          }
          case 200: {
            PickUpDay = input.ReadInt32();
            break;
          }
          case 208: {
            PickUpHour = input.ReadInt32();
            break;
          }
          case 216: {
            PickUpMinute = input.ReadInt32();
            break;
          }
          case 224: {
            DropoffYear = input.ReadInt32();
            break;
          }
          case 232: {
            DropoffMonth = input.ReadInt32();
            break;
          }
          case 240: {
            DropoffDay = input.ReadInt32();
            break;
          }
          case 248: {
            DropoffHour = input.ReadInt32();
            break;
          }
          case 256: {
            DropoffMinute = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyRequest : pb::IMessage<EmptyRequest> {
    private static readonly pb::MessageParser<EmptyRequest> _parser = new pb::MessageParser<EmptyRequest>(() => new EmptyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Faraday_BE_gRPC.BookingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest(EmptyRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyRequest Clone() {
      return new EmptyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ComfirmReply : pb::IMessage<ComfirmReply> {
    private static readonly pb::MessageParser<ComfirmReply> _parser = new pb::MessageParser<ComfirmReply>(() => new ComfirmReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComfirmReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Faraday_BE_gRPC.BookingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComfirmReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComfirmReply(ComfirmReply other) : this() {
      confirm_ = other.confirm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComfirmReply Clone() {
      return new ComfirmReply(this);
    }

    /// <summary>Field number for the "confirm" field.</summary>
    public const int ConfirmFieldNumber = 1;
    private bool confirm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComfirmReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComfirmReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Confirm != other.Confirm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Confirm != false) hash ^= Confirm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Confirm != false) {
        output.WriteRawTag(8);
        output.WriteBool(Confirm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Confirm != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComfirmReply other) {
      if (other == null) {
        return;
      }
      if (other.Confirm != false) {
        Confirm = other.Confirm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Confirm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomerRequest : pb::IMessage<CustomerRequest> {
    private static readonly pb::MessageParser<CustomerRequest> _parser = new pb::MessageParser<CustomerRequest>(() => new CustomerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Faraday_BE_gRPC.BookingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerRequest(CustomerRequest other) : this() {
      customerId_ = other.customerId_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      gender_ = other.gender_;
      driversLicense_ = other.driversLicense_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerRequest Clone() {
      return new CustomerRequest(this);
    }

    /// <summary>Field number for the "CustomerId" field.</summary>
    public const int CustomerIdFieldNumber = 1;
    private int customerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomerId {
      get { return customerId_; }
      set {
        customerId_ = value;
      }
    }

    /// <summary>Field number for the "FirstName" field.</summary>
    public const int FirstNameFieldNumber = 2;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastName" field.</summary>
    public const int LastNameFieldNumber = 3;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Gender" field.</summary>
    public const int GenderFieldNumber = 4;
    private string gender_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gender {
      get { return gender_; }
      set {
        gender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DriversLicense" field.</summary>
    public const int DriversLicenseFieldNumber = 5;
    private string driversLicense_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DriversLicense {
      get { return driversLicense_; }
      set {
        driversLicense_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomerId != other.CustomerId) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (Gender != other.Gender) return false;
      if (DriversLicense != other.DriversLicense) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CustomerId != 0) hash ^= CustomerId.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Gender.Length != 0) hash ^= Gender.GetHashCode();
      if (DriversLicense.Length != 0) hash ^= DriversLicense.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CustomerId);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastName);
      }
      if (Gender.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Gender);
      }
      if (DriversLicense.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DriversLicense);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CustomerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomerId);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Gender.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gender);
      }
      if (DriversLicense.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriversLicense);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomerRequest other) {
      if (other == null) {
        return;
      }
      if (other.CustomerId != 0) {
        CustomerId = other.CustomerId;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Gender.Length != 0) {
        Gender = other.Gender;
      }
      if (other.DriversLicense.Length != 0) {
        DriversLicense = other.DriversLicense;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CustomerId = input.ReadInt32();
            break;
          }
          case 18: {
            FirstName = input.ReadString();
            break;
          }
          case 26: {
            LastName = input.ReadString();
            break;
          }
          case 34: {
            Gender = input.ReadString();
            break;
          }
          case 42: {
            DriversLicense = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CarReply : pb::IMessage<CarReply> {
    private static readonly pb::MessageParser<CarReply> _parser = new pb::MessageParser<CarReply>(() => new CarReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CarReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Faraday_BE_gRPC.BookingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarReply(CarReply other) : this() {
      carId_ = other.carId_;
      doors_ = other.doors_;
      fuelType_ = other.fuelType_;
      type_ = other.type_;
      licensePlate_ = other.licensePlate_;
      price_ = other.price_;
      animalsAllowed_ = other.animalsAllowed_;
      color_ = other.color_;
      brand_ = other.brand_;
      model_ = other.model_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CarReply Clone() {
      return new CarReply(this);
    }

    /// <summary>Field number for the "CarId" field.</summary>
    public const int CarIdFieldNumber = 1;
    private int carId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarId {
      get { return carId_; }
      set {
        carId_ = value;
      }
    }

    /// <summary>Field number for the "Doors" field.</summary>
    public const int DoorsFieldNumber = 2;
    private int doors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Doors {
      get { return doors_; }
      set {
        doors_ = value;
      }
    }

    /// <summary>Field number for the "FuelType" field.</summary>
    public const int FuelTypeFieldNumber = 3;
    private string fuelType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FuelType {
      get { return fuelType_; }
      set {
        fuelType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LicensePlate" field.</summary>
    public const int LicensePlateFieldNumber = 5;
    private string licensePlate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicensePlate {
      get { return licensePlate_; }
      set {
        licensePlate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 6;
    private float price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "AnimalsAllowed" field.</summary>
    public const int AnimalsAllowedFieldNumber = 7;
    private bool animalsAllowed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AnimalsAllowed {
      get { return animalsAllowed_; }
      set {
        animalsAllowed_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 8;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Brand" field.</summary>
    public const int BrandFieldNumber = 9;
    private string brand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Brand {
      get { return brand_; }
      set {
        brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Model" field.</summary>
    public const int ModelFieldNumber = 10;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CarReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CarReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarId != other.CarId) return false;
      if (Doors != other.Doors) return false;
      if (FuelType != other.FuelType) return false;
      if (Type != other.Type) return false;
      if (LicensePlate != other.LicensePlate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
      if (AnimalsAllowed != other.AnimalsAllowed) return false;
      if (Color != other.Color) return false;
      if (Brand != other.Brand) return false;
      if (Model != other.Model) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarId != 0) hash ^= CarId.GetHashCode();
      if (Doors != 0) hash ^= Doors.GetHashCode();
      if (FuelType.Length != 0) hash ^= FuelType.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (LicensePlate.Length != 0) hash ^= LicensePlate.GetHashCode();
      if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
      if (AnimalsAllowed != false) hash ^= AnimalsAllowed.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (Brand.Length != 0) hash ^= Brand.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CarId);
      }
      if (Doors != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Doors);
      }
      if (FuelType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FuelType);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (LicensePlate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LicensePlate);
      }
      if (Price != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Price);
      }
      if (AnimalsAllowed != false) {
        output.WriteRawTag(56);
        output.WriteBool(AnimalsAllowed);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Color);
      }
      if (Brand.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Brand);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Model);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarId);
      }
      if (Doors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Doors);
      }
      if (FuelType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FuelType);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (LicensePlate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicensePlate);
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (AnimalsAllowed != false) {
        size += 1 + 1;
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (Brand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CarReply other) {
      if (other == null) {
        return;
      }
      if (other.CarId != 0) {
        CarId = other.CarId;
      }
      if (other.Doors != 0) {
        Doors = other.Doors;
      }
      if (other.FuelType.Length != 0) {
        FuelType = other.FuelType;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.LicensePlate.Length != 0) {
        LicensePlate = other.LicensePlate;
      }
      if (other.Price != 0F) {
        Price = other.Price;
      }
      if (other.AnimalsAllowed != false) {
        AnimalsAllowed = other.AnimalsAllowed;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.Brand.Length != 0) {
        Brand = other.Brand;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CarId = input.ReadInt32();
            break;
          }
          case 16: {
            Doors = input.ReadInt32();
            break;
          }
          case 26: {
            FuelType = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 42: {
            LicensePlate = input.ReadString();
            break;
          }
          case 53: {
            Price = input.ReadFloat();
            break;
          }
          case 56: {
            AnimalsAllowed = input.ReadBool();
            break;
          }
          case 66: {
            Color = input.ReadString();
            break;
          }
          case 74: {
            Brand = input.ReadString();
            break;
          }
          case 82: {
            Model = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
